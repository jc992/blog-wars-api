import {
  HttpException,
  HttpStatus,
  Injectable,
  NotImplementedException,
} from '@nestjs/common';
import { CreateBlogPostDto } from './dto/create-blog-post.dto';
import { UpdateBlogPostDto } from './dto/update-blog-post.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { BlogPost } from './entities/blog-post.entity';
import { Repository } from 'typeorm';
import { UserService } from '../user/user.service';

@Injectable()
export class BlogPostService {
  constructor(
    private userService: UserService,
    @InjectRepository(BlogPost) private repo: Repository<BlogPost>,
  ) {}
  async create({ userId, content }: CreateBlogPostDto): Promise<any> {
    // TODO: enrypt decrypt content
    // TODO: add verification to check if jwt token is generated by this same user
    const user = await this.userService.getUserById(+userId);
    if (!user) {
      throw new HttpException('user not found', HttpStatus.NOT_FOUND);
    }
    return this.repo.insert({ content, userId: +userId });
  }

  findAll() {
    return this.repo.find();
  }

  async findOne(id: number) {
    return this.repo.findBy({ id });
  }

  async findByUserId(userId: number) {
    return this.repo.findBy({ userId });
  }

  update(id: number, updateBlogPostDto: UpdateBlogPostDto) {
    throw new NotImplementedException('');
  }

  remove(id: number) {
    throw new NotImplementedException('');
  }
}
