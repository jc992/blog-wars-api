import { HttpException, HttpStatus, Injectable, NotImplementedException } from '@nestjs/common';
import { CreateBlogPostDto } from './dto/createBlogPost.dto';
import { UpdateBlogPostDto } from './dto/updateBlogPost.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { BlogPost } from './entities/blogPost.entity';
import { Repository } from 'typeorm';
import { UserService } from '../user/user.service';
import { EncryptionService } from '../encryption/encryption.service';

@Injectable()
export class BlogPostService {
  constructor(
    private userService: UserService,
    private encryptionService: EncryptionService,
    @InjectRepository(BlogPost) private repo: Repository<BlogPost>,
  ) {}
  async create({ userId, content }: CreateBlogPostDto): Promise<any> {
    // TODO: add verification to check if jwt token is generated by this same user
    const user = await this.userService.getUserById(userId);
    if (!user) {
      throw new HttpException('user not found', HttpStatus.NOT_FOUND);
    }
    const encryptedContent = await this.encryptionService.encrypt(content);
    return this.repo.insert({
      content: encryptedContent,
      userId: userId,
    });
  }

  findAll() {
    return this.repo.find();
  }

  async findOne(id: number): Promise<BlogPost> {
    const post = await this.repo.findOneBy({ id });
    if (!post) {
      throw new HttpException('blog post not found', HttpStatus.NOT_FOUND);
    }
    const decryptedContent = await this.encryptionService.decrypt(post.content);
    return { ...post, content: decryptedContent };
  }

  async findByUserId(userId: number) {
    return this.repo.findBy({ userId });
  }

  update(id: number, updateBlogPostDto: UpdateBlogPostDto) {
    throw new NotImplementedException('');
  }

  remove(id: number) {
    throw new NotImplementedException('');
  }
}
