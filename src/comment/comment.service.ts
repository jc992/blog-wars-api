import { HttpException, HttpStatus, Injectable, NotImplementedException } from '@nestjs/common';
import { CreateCommentDto } from './dto/createComment.dto';
import { UpdateCommentDto } from './dto/updateComment.dto';
import { UserService } from '../user/user.service';
import { EncryptionService } from '../encryption/encryption.service';
import { Comment } from './entities/comment.entity';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { BlogPostService } from '../blog-post/blogPost.service';

@Injectable()
export class CommentService {
  constructor(
    private userService: UserService,
    private blogPostService: BlogPostService,
    private encryptionService: EncryptionService,
    @InjectRepository(Comment) private repo: Repository<Comment>,
  ) {}

  async create({ userId, blogPostId, content }: CreateCommentDto): Promise<any> {
    // TODO: add verification to check if jwt token is generated by this same user
    const [user, post] = await Promise.all([
      this.userService.getUserById(userId),
      this.blogPostService.findById(blogPostId),
    ]);

    if (!user) {
      throw new HttpException('user not found', HttpStatus.NOT_FOUND);
    }

    if (!post) {
      throw new HttpException('blog post not found', HttpStatus.NOT_FOUND);
    }

    const encryptedContent = await this.encryptionService.encrypt(content);
    return this.repo.insert({
      content: encryptedContent,
      userId,
      blogPostId,
    });
  }

  findAll() {
    return this.repo.find();
  }

  async findOne(id: number): Promise<Comment> {
    const comment = await this.repo.findOneBy({ id });
    if (!comment) {
      throw new HttpException('comment not found', HttpStatus.NOT_FOUND);
    }
    return this.decryptComment(comment);
  }

  async findByUserId(userId: number) {
    const posts = await this.repo.findBy({ userId });
    return Promise.all(posts.map(async (p) => await this.decryptComment(p)));
  }

  async findByBlogPostId(blogPostId: number) {
    const posts = await this.repo.findBy({ blogPostId });
    return Promise.all(posts.map(async (p) => await this.decryptComment(p)));
  }

  private async decryptComment(comment: Comment): Promise<Comment> {
    const decryptedContent = await this.encryptionService.decrypt(comment.content);
    return {
      ...comment,
      content: decryptedContent,
    };
  }

  update(_: number, __: UpdateCommentDto) {
    throw new NotImplementedException();
  }

  remove(_: number) {
    throw new NotImplementedException();
  }
}
